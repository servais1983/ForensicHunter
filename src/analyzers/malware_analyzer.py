#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module d'analyse de malware et ransomware.

Ce module permet de détecter les signes de malware et ransomware
dans les artefacts collectés.
"""

import os
import logging
import re
import json
from pathlib import Path

from .base_analyzer import BaseAnalyzer, Finding

# Configuration du logger
logger = logging.getLogger("forensichunter.analyzers.malware")

class MalwareAnalyzer(BaseAnalyzer):
    """Analyseur de malware et ransomware."""
    
    def __init__(self, config=None):
        """
        Initialise un nouvel analyseur de malware.
        
        Args:
            config (dict, optional): Configuration de l'analyseur
        """
        super().__init__(config)
        self.malware_signatures = self.config.get("malware_signatures", [
            # Signatures de ransomware
            {
                "name": "LockBit 3.0",
                "type": "ransomware",
                "patterns": [
                    r"\.lockbit",
                    r"LOCKBIT_RANSOMWARE",
                    r"restore-my-files\.txt",
                    r"HLJkNskOq",
                    r"LockBit Black"
                ],
                "registry_keys": [
                    r"HKLM\\SOFTWARE\\LockBit",
                    r"HKCU\\SOFTWARE\\LockBit"
                ],
                "file_paths": [
                    r"C:\\ProgramData\\LockBit",
                    r"C:\\Windows\\Temp\\LockBit"
                ],
                "severity": "critical",
                "confidence": 80
            },
            # Autres ransomwares
            {
                "name": "Ryuk",
                "type": "ransomware",
                "patterns": [
                    r"\.RYK$",
                    r"RyukReadMe\.txt",
                    r"UNIQUE_ID_DO_NOT_REMOVE"
                ],
                "registry_keys": [],
                "file_paths": [],
                "severity": "critical",
                "confidence": 80
            },
            {
                "name": "WannaCry",
                "type": "ransomware",
                "patterns": [
                    r"\.wncry$",
                    r"@WanaDecryptor@",
                    r"tasksche\.exe",
                    r"taskdl\.exe"
                ],
                "registry_keys": [],
                "file_paths": [],
                "severity": "critical",
                "confidence": 80
            },
            # Backdoors
            {
                "name": "Generic Backdoor",
                "type": "backdoor",
                "patterns": [
                    r"cmd\.exe /c net user /add",
                    r"net localgroup administrators",
                    r"netsh firewall add",
                    r"reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                    r"schtasks /create"
                ],
                "registry_keys": [
                    r"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                    r"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
                ],
                "file_paths": [],
                "severity": "high",
                "confidence": 70
            },
            # Malwares génériques
            {
                "name": "Generic Malware",
                "type": "malware",
                "patterns": [
                    r"powershell -e ",
                    r"powershell -enc",
                    r"powershell -nop -w hidden -c",
                    r"cmd\.exe /c powershell",
                    r"rundll32\.exe.*,DllRegisterServer"
                ],
                "registry_keys": [],
                "file_paths": [],
                "severity": "medium",
                "confidence": 60
            }
        ])
        self.suspicious_extensions = self.config.get("suspicious_extensions", [
            ".exe", ".dll", ".bat", ".ps1", ".vbs", ".js", ".hta", ".scr"
        ])
        self.suspicious_locations = self.config.get("suspicious_locations", [
            r"C:\Windows\Temp",
            r"C:\Temp",
            r"C:\Users\Public",
            r"C:\ProgramData"
        ])
        self.max_file_size = self.config.get("max_file_size", 10 * 1024 * 1024)  # 10 MB
    
    def get_name(self):
        """
        Retourne le nom de l'analyseur.
        
        Returns:
            str: Nom de l'analyseur
        """
        return "MalwareAnalyzer"
    
    def get_description(self):
        """
        Retourne la description de l'analyseur.
        
        Returns:
            str: Description de l'analyseur
        """
        return "Analyseur de malware et ransomware (LockBit 3.0, Ryuk, WannaCry, etc.)"
    
    def analyze(self, artifacts):
        """
        Analyse les artefacts pour détecter des signes de malware et ransomware.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
            
        Returns:
            list: Liste d'objets Finding résultant de l'analyse
        """
        self.clear_findings()
        
        # Regrouper les artefacts par type
        artifact_groups = {}
        for artifact in artifacts:
            # Les artefacts sont des dictionnaires, pas des objets
            artifact_type = artifact.get("type", "unknown")
            if artifact_type not in artifact_groups:
                artifact_groups[artifact_type] = []
            artifact_groups[artifact_type].append(artifact)
        
        # Analyser les artefacts par type
        for artifact_type, artifacts_of_type in artifact_groups.items():
            logger.info(f"Analyse de {len(artifacts_of_type)} artefacts de type {artifact_type}...")
            
            if artifact_type == "file":
                self._analyze_file_artifacts(artifacts_of_type)
            elif artifact_type == "registry":
                self._analyze_registry_artifacts(artifacts_of_type)
            elif artifact_type == "event_log":
                self._analyze_eventlog_artifacts(artifacts_of_type)
            elif artifact_type == "disk":
                self._analyze_disk_artifacts(artifacts_of_type)
            elif artifact_type == "partition":
                self._analyze_partition_artifacts(artifacts_of_type)
            else:
                logger.debug(f"Pas d'analyseur spécifique pour le type {artifact_type}")
        
        # Analyser les corrélations entre les résultats
        self._analyze_correlations()
        
        logger.info(f"{len(self.findings)} résultats trouvés au total")
        return self.findings
    
    def _analyze_file_artifacts(self, artifacts):
        """
        Analyse les artefacts de fichiers.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                # Extraire les informations du fichier
                file_data = artifact["data"]
                file_path = file_data.get("path", "")
                
                # Vérifier les extensions suspectes
                if file_path:
                    file_ext = os.path.splitext(file_path)[1].lower()
                    if file_ext in self.suspicious_extensions:
                        # Vérifier les emplacements suspects
                        is_suspicious_location = False
                        for location in self.suspicious_locations:
                            if location.lower() in file_path.lower():
                                is_suspicious_location = True
                                break
                        
                        if is_suspicious_location:
                            self.add_finding(
                                finding_type="suspicious_file",
                                description=f"Fichier suspect trouvé dans un emplacement sensible: {file_path}",
                                severity="medium",
                                confidence=60,
                                artifacts=[artifact],
                                metadata={
                                    "file_path": file_path,
                                    "extension": file_ext,
                                    "location": file_path
                                }
                            )
                
                # Vérifier les signatures de malware dans le nom du fichier
                for signature in self.malware_signatures:
                    # Vérifier les chemins de fichiers
                    for path_pattern in signature["file_paths"]:
                        if re.search(path_pattern, file_path, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Chemin de fichier associé à {signature['name']} détecté: {file_path}",
                                severity=signature["severity"],
                                confidence=signature["confidence"],
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "file_path": file_path,
                                    "pattern": path_pattern
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de fichier: {str(e)}")
    
    def _analyze_registry_artifacts(self, artifacts):
        """
        Analyse les artefacts du registre.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                # Extraire les informations de la clé de registre
                registry_key = artifact.get("source", "")
                
                # Vérifier les signatures de malware
                for signature in self.malware_signatures:
                    # Vérifier les clés de registre
                    for key_pattern in signature["registry_keys"]:
                        if re.search(key_pattern, registry_key, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Clé de registre associée à {signature['name']} détectée: {registry_key}",
                                severity=signature["severity"],
                                confidence=signature["confidence"],
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "registry_key": registry_key,
                                    "pattern": key_pattern
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de registre: {str(e)}")
    
    def _analyze_eventlog_artifacts(self, artifacts):
        """
        Analyse les artefacts des journaux d'événements.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                # Extraire les informations du journal d'événements
                event_data = artifact["data"]
                
                # Analyser le contenu de l'événement pour des signatures de malware
                event_content = str(event_data)
                for signature in self.malware_signatures:
                    for pattern in signature["patterns"]:
                        if re.search(pattern, event_content, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Signature de {signature['name']} détectée dans un journal d'événements",
                                severity=signature["severity"],
                                confidence=signature["confidence"] - 10,  # Réduire la confiance pour les journaux d'événements
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "pattern": pattern
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact d'événement: {str(e)}")
    
    def _analyze_disk_artifacts(self, artifacts):
        """
        Analyse les artefacts de disque.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                disk_data = artifact["data"]
                disk_model = disk_data.get("model", "")
                disk_serial = disk_data.get("serial", "")
                
                # Vérifier les signatures de malware dans les informations du disque
                for signature in self.malware_signatures:
                    for pattern in signature["patterns"]:
                        if re.search(pattern, disk_model, re.IGNORECASE) or re.search(pattern, disk_serial, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Signature de {signature['name']} détectée dans les informations du disque",
                                severity=signature["severity"],
                                confidence=signature["confidence"] - 20,  # Réduire la confiance pour les informations de disque
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "pattern": pattern,
                                    "disk_model": disk_model,
                                    "disk_serial": disk_serial
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de disque: {str(e)}")
    
    def _analyze_partition_artifacts(self, artifacts):
        """
        Analyse les artefacts de partition.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                partition_data = artifact["data"]
                partition_type = partition_data.get("type", "")
                
                # Détecter des partitions cachées ou suspectes
                if partition_type.lower() in ["hidden", "unknown", "0x00"]:
                    self.add_finding(
                        finding_type="suspicious_partition",
                        description=f"Partition suspecte détectée: {partition_type}",
                        severity="medium",
                        confidence=50,
                        artifacts=[artifact],
                        metadata={
                            "partition_type": partition_type
                        }
                    )
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de partition: {str(e)}")
    
    def _analyze_correlations(self):
        """
        Analyse les corrélations entre les résultats pour détecter des menaces plus complexes.
        """
        # Regrouper les résultats par type
        findings_by_type = {}
        for finding in self.findings:
            if finding.type not in findings_by_type:
                findings_by_type[finding.type] = []
            findings_by_type[finding.type].append(finding)
        
        # Détecter une infection par ransomware
        if "ransomware" in findings_by_type and len(findings_by_type["ransomware"]) > 0:
            # Regrouper par nom de ransomware
            ransomware_names = {}
            for finding in findings_by_type["ransomware"]:
                name = finding.metadata.get("malware_name", "Unknown")
                if name not in ransomware_names:
                    ransomware_names[name] = []
                ransomware_names[name].append(finding)
            
            # Pour chaque ransomware détecté, créer un résultat de corrélation
            for name, findings in ransomware_names.items():
                if len(findings) >= 2:
                    artifacts = []
                    for finding in findings:
                        artifacts.extend(finding.artifacts)
                    
                    self.add_finding(
                        finding_type="ransomware_infection",
                        description=f"Infection par ransomware {name} détectée avec un haut niveau de confiance",
                        severity="critical",
                        confidence=90,
                        artifacts=artifacts,
                        metadata={
                            "malware_name": name,
                            "evidence_count": len(findings),
                            "correlated_findings": [finding.id for finding in findings]
                        }
                    )
        
        # Détecter une persistance de malware
        if "suspicious_registry" in findings_by_type and "suspicious_file" in findings_by_type:
            registry_findings = findings_by_type["suspicious_registry"]
            file_findings = findings_by_type["suspicious_file"]
            
            for reg_finding in registry_findings:
                reg_value = reg_finding.metadata.get("value", "")
                
                for file_finding in file_findings:
                    file_path = file_finding.metadata.get("file_path", "")
                    
                    # Si le chemin du fichier est dans la valeur de registre
                    if file_path and reg_value and file_path.lower() in reg_value.lower():
                        self.add_finding(
                            finding_type="malware_persistence",
                            description=f"Mécanisme de persistance de malware détecté: {file_path} référencé dans le registre",
                            severity="high",
                            confidence=80,
                            artifacts=reg_finding.artifacts + file_finding.artifacts,
                            metadata={
                                "registry_key": reg_finding.metadata.get("registry_key", ""),
                                "file_path": file_path,
                                "correlated_findings": [reg_finding.id, file_finding.id]
                            }
                        )
