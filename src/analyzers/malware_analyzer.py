#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module d'analyse de malware et ransomware.

Ce module permet de détecter les signes de malware et ransomware
dans les artefacts collectés.
"""

import os
import logging
import re
import json
from pathlib import Path

from .base_analyzer import BaseAnalyzer, Finding

# Configuration du logger
logger = logging.getLogger("forensichunter.analyzers.malware")

class MalwareAnalyzer(BaseAnalyzer):
    """Analyseur de malware et ransomware."""
    
    def __init__(self, config=None):
        """
        Initialise un nouvel analyseur de malware.
        
        Args:
            config (dict, optional): Configuration de l'analyseur
        """
        super().__init__(config)
        self.malware_signatures = self.config.get("malware_signatures", [
            # Signatures de ransomware
            {
                "name": "LockBit 3.0",
                "type": "ransomware",
                "patterns": [
                    r"\.lockbit",
                    r"LOCKBIT_RANSOMWARE",
                    r"restore-my-files\.txt",
                    r"HLJkNskOq",
                    r"LockBit Black"
                ],
                "registry_keys": [
                    r"HKLM\\SOFTWARE\\LockBit",
                    r"HKCU\\SOFTWARE\\LockBit"
                ],
                "file_paths": [
                    r"C:\\ProgramData\\LockBit",
                    r"C:\\Windows\\Temp\\LockBit"
                ],
                "severity": "critical",
                "confidence": 80
            },
            # Autres ransomwares
            {
                "name": "Ryuk",
                "type": "ransomware",
                "patterns": [
                    r"\.RYK$",
                    r"RyukReadMe\.txt",
                    r"UNIQUE_ID_DO_NOT_REMOVE"
                ],
                "registry_keys": [],
                "file_paths": [],
                "severity": "critical",
                "confidence": 80
            },
            {
                "name": "WannaCry",
                "type": "ransomware",
                "patterns": [
                    r"\.wncry$",
                    r"@WanaDecryptor@",
                    r"tasksche\.exe",
                    r"taskdl\.exe"
                ],
                "registry_keys": [],
                "file_paths": [],
                "severity": "critical",
                "confidence": 80
            },
            # Backdoors
            {
                "name": "Generic Backdoor",
                "type": "backdoor",
                "patterns": [
                    r"cmd\.exe /c net user /add",
                    r"net localgroup administrators",
                    r"netsh firewall add",
                    r"reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                    r"schtasks /create"
                ],
                "registry_keys": [
                    r"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                    r"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
                ],
                "file_paths": [],
                "severity": "high",
                "confidence": 70
            },
            # Malwares génériques
            {
                "name": "Generic Malware",
                "type": "malware",
                "patterns": [
                    r"powershell -e ",
                    r"powershell -enc",
                    r"powershell -nop -w hidden -c",
                    r"cmd\.exe /c powershell",
                    r"rundll32\.exe.*,DllRegisterServer"
                ],
                "registry_keys": [],
                "file_paths": [],
                "severity": "medium",
                "confidence": 60
            }
        ])
        self.suspicious_extensions = self.config.get("suspicious_extensions", [
            ".exe", ".dll", ".bat", ".ps1", ".vbs", ".js", ".hta", ".scr"
        ])
        self.suspicious_locations = self.config.get("suspicious_locations", [
            r"C:\Windows\Temp",
            r"C:\Temp",
            r"C:\Users\Public",
            r"C:\ProgramData"
        ])
        self.max_file_size = self.config.get("max_file_size", 10 * 1024 * 1024)  # 10 MB
    
    def get_name(self):
        """
        Retourne le nom de l'analyseur.
        
        Returns:
            str: Nom de l'analyseur
        """
        return "MalwareAnalyzer"
    
    def get_description(self):
        """
        Retourne la description de l'analyseur.
        
        Returns:
            str: Description de l'analyseur
        """
        return "Analyseur de malware et ransomware (LockBit 3.0, Ryuk, WannaCry, etc.)"
    
    def _artifact_to_dict(self, artifact):
        """
        Convertit un objet Artifact en dictionnaire pour la compatibilité.
        
        Args:
            artifact: Objet Artifact ou dictionnaire
            
        Returns:
            dict: Dictionnaire représentant l'artefact
        """
        if hasattr(artifact, 'to_dict'):
            # C'est un objet Artifact, le convertir en dictionnaire
            return artifact.to_dict()
        elif isinstance(artifact, dict):
            # C'est déjà un dictionnaire
            return artifact
        else:
            # Essayer d'extraire les attributs manuellement
            try:
                return {
                    "id": getattr(artifact, 'id', ''),
                    "type": getattr(artifact, 'type', 'unknown'),
                    "source": getattr(artifact, 'source', ''),
                    "timestamp": getattr(artifact, 'timestamp', ''),
                    "data": getattr(artifact, 'data', {}),
                    "metadata": getattr(artifact, 'metadata', {})
                }
            except Exception as e:
                logger.error(f"Erreur lors de la conversion d'artefact: {str(e)}")
                return {
                    "id": "",
                    "type": "unknown",
                    "source": "",
                    "timestamp": "",
                    "data": {},
                    "metadata": {}
                }
    
    def analyze(self, artifacts):
        """
        Analyse les artefacts pour détecter des signes de malware et ransomware.
        
        Args:
            artifacts (list): Liste d'objets Artifact à analyser
            
        Returns:
            list: Liste d'objets Finding résultant de l'analyse
        """
        self.clear_findings()
        
        if not artifacts:
            logger.warning("Aucun artefact fourni pour l'analyse de malware")
            return self.findings
        
        logger.info(f"Analyse de {len(artifacts)} artefacts pour la détection de malware...")
        
        # Convertir tous les artefacts en dictionnaires pour compatibilité
        artifact_dicts = []
        for artifact in artifacts:
            try:
                artifact_dict = self._artifact_to_dict(artifact)
                artifact_dicts.append(artifact_dict)
            except Exception as e:
                logger.error(f"Erreur lors de la conversion d'un artefact: {str(e)}")
                continue
        
        # Regrouper les artefacts par type
        artifact_groups = {}
        for artifact_dict in artifact_dicts:
            artifact_type = artifact_dict.get("type", "unknown")
            if artifact_type not in artifact_groups:
                artifact_groups[artifact_type] = []
            artifact_groups[artifact_type].append(artifact_dict)
        
        # Analyser les artefacts par type
        for artifact_type, artifacts_of_type in artifact_groups.items():
            logger.info(f"Analyse de {len(artifacts_of_type)} artefacts de type {artifact_type}...")
            
            try:
                if artifact_type == "file" or artifact_type == "file_info":
                    self._analyze_file_artifacts(artifacts_of_type)
                elif artifact_type == "registry":
                    self._analyze_registry_artifacts(artifacts_of_type)
                elif artifact_type == "event_log":
                    self._analyze_eventlog_artifacts(artifacts_of_type)
                elif artifact_type == "disk" or artifact_type == "disk_info":
                    self._analyze_disk_artifacts(artifacts_of_type)
                elif artifact_type == "partition":
                    self._analyze_partition_artifacts(artifacts_of_type)
                else:
                    logger.debug(f"Pas d'analyseur spécifique pour le type {artifact_type}")
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse du type {artifact_type}: {str(e)}")
                continue
        
        # Analyser les corrélations entre les résultats
        self._analyze_correlations()
        
        logger.info(f"{len(self.findings)} résultats trouvés au total")
        return self.findings
    
    def _analyze_file_artifacts(self, artifacts):
        """
        Analyse les artefacts de fichiers.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                # Extraire les informations du fichier
                file_data = artifact["data"]
                file_path = file_data.get("path", "")
                
                if not file_path:
                    continue
                
                # Vérifier les extensions suspectes
                file_ext = os.path.splitext(file_path)[1].lower()
                if file_ext in self.suspicious_extensions:
                    # Vérifier les emplacements suspects
                    is_suspicious_location = False
                    for location in self.suspicious_locations:
                        if location.lower() in file_path.lower():
                            is_suspicious_location = True
                            break
                    
                    if is_suspicious_location:
                        self.add_finding(
                            finding_type="suspicious_file",
                            description=f"Fichier suspect trouvé dans un emplacement sensible: {file_path}",
                            severity="medium",
                            confidence=60,
                            artifacts=[artifact],
                            metadata={
                                "file_path": file_path,
                                "extension": file_ext,
                                "location": file_path
                            }
                        )
                
                # Vérifier les signatures de malware dans le nom du fichier
                for signature in self.malware_signatures:
                    # Vérifier les patterns dans le nom du fichier
                    for pattern in signature["patterns"]:
                        if re.search(pattern, file_path, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Pattern de {signature['name']} détecté dans le nom de fichier: {file_path}",
                                severity=signature["severity"],
                                confidence=signature["confidence"],
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "file_path": file_path,
                                    "pattern": pattern
                                }
                            )
                            break
                    
                    # Vérifier les chemins de fichiers spécifiques
                    for path_pattern in signature["file_paths"]:
                        if re.search(path_pattern, file_path, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Chemin de fichier associé à {signature['name']} détecté: {file_path}",
                                severity=signature["severity"],
                                confidence=signature["confidence"],
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "file_path": file_path,
                                    "pattern": path_pattern
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de fichier: {str(e)}")
                continue
    
    def _analyze_registry_artifacts(self, artifacts):
        """
        Analyse les artefacts du registre.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                # Extraire les informations de la clé de registre
                registry_key = artifact.get("source", "")
                registry_metadata = artifact.get("metadata", {})
                if not registry_key and registry_metadata:
                    registry_key = registry_metadata.get("registry_key", "")
                
                if not registry_key:
                    continue
                
                # Analyser le contenu du registre
                registry_data = artifact["data"]
                registry_content = str(registry_data)
                
                # Vérifier les signatures de malware
                for signature in self.malware_signatures:
                    # Vérifier les clés de registre
                    for key_pattern in signature["registry_keys"]:
                        if re.search(key_pattern, registry_key, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Clé de registre associée à {signature['name']} détectée: {registry_key}",
                                severity=signature["severity"],
                                confidence=signature["confidence"],
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "registry_key": registry_key,
                                    "pattern": key_pattern
                                }
                            )
                            break
                    
                    # Vérifier les patterns dans les valeurs du registre
                    for pattern in signature["patterns"]:
                        if re.search(pattern, registry_content, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Pattern de {signature['name']} détecté dans une valeur de registre",
                                severity=signature["severity"],
                                confidence=signature["confidence"] - 10,  # Réduire la confiance
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "registry_key": registry_key,
                                    "pattern": pattern
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de registre: {str(e)}")
                continue
    
    def _analyze_eventlog_artifacts(self, artifacts):
        """
        Analyse les artefacts des journaux d'événements.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                # Extraire les informations du journal d'événements
                event_data = artifact["data"]
                event_message = event_data.get("message", "")
                
                if not event_message:
                    continue
                
                # Analyser le contenu de l'événement pour des signatures de malware
                for signature in self.malware_signatures:
                    for pattern in signature["patterns"]:
                        if re.search(pattern, event_message, re.IGNORECASE):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Signature de {signature['name']} détectée dans un journal d'événements",
                                severity=signature["severity"],
                                confidence=max(signature["confidence"] - 20, 30),  # Réduire davantage la confiance
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "pattern": pattern,
                                    "event_message": event_message[:200] + "..." if len(event_message) > 200 else event_message
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact d'événement: {str(e)}")
                continue
    
    def _analyze_disk_artifacts(self, artifacts):
        """
        Analyse les artefacts de disque.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                disk_data = artifact["data"]
                
                # Extraire les informations du disque
                disk_info = disk_data.get("disk_info", {})
                disk_model = disk_info.get("model", "")
                disk_serial = disk_info.get("serial", "")
                
                # Vérifier les signatures de malware dans les informations du disque
                for signature in self.malware_signatures:
                    for pattern in signature["patterns"]:
                        if (disk_model and re.search(pattern, disk_model, re.IGNORECASE)) or \
                           (disk_serial and re.search(pattern, disk_serial, re.IGNORECASE)):
                            self.add_finding(
                                finding_type=signature["type"],
                                description=f"Signature de {signature['name']} détectée dans les informations du disque",
                                severity=signature["severity"],
                                confidence=max(signature["confidence"] - 30, 20),  # Réduire encore plus la confiance
                                artifacts=[artifact],
                                metadata={
                                    "malware_name": signature["name"],
                                    "pattern": pattern,
                                    "disk_model": disk_model,
                                    "disk_serial": disk_serial
                                }
                            )
                            break
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de disque: {str(e)}")
                continue
    
    def _analyze_partition_artifacts(self, artifacts):
        """
        Analyse les artefacts de partition.
        
        Args:
            artifacts (list): Liste de dictionnaires d'artefacts à analyser
        """
        for artifact in artifacts:
            try:
                # Vérifier si l'artefact contient des données
                if not artifact.get("data"):
                    continue
                
                partition_data = artifact["data"]
                partition_type = partition_data.get("type", "")
                
                # Détecter des partitions cachées ou suspectes
                if partition_type.lower() in ["hidden", "unknown", "0x00"]:
                    self.add_finding(
                        finding_type="suspicious_partition",
                        description=f"Partition suspecte détectée: {partition_type}",
                        severity="medium",
                        confidence=50,
                        artifacts=[artifact],
                        metadata={
                            "partition_type": partition_type
                        }
                    )
            
            except Exception as e:
                logger.error(f"Erreur lors de l'analyse de l'artefact de partition: {str(e)}")
                continue
    
    def _analyze_correlations(self):
        """
        Analyse les corrélations entre les résultats pour détecter des menaces plus complexes.
        """
        try:
            # Regrouper les résultats par type
            findings_by_type = {}
            for finding in self.findings:
                if finding.type not in findings_by_type:
                    findings_by_type[finding.type] = []
                findings_by_type[finding.type].append(finding)
            
            # Détecter une infection par ransomware
            if "ransomware" in findings_by_type and len(findings_by_type["ransomware"]) > 0:
                # Regrouper par nom de ransomware
                ransomware_names = {}
                for finding in findings_by_type["ransomware"]:
                    name = finding.metadata.get("malware_name", "Unknown")
                    if name not in ransomware_names:
                        ransomware_names[name] = []
                    ransomware_names[name].append(finding)
                
                # Pour chaque ransomware détecté, créer un résultat de corrélation
                for name, findings in ransomware_names.items():
                    if len(findings) >= 2:
                        artifacts = []
                        for finding in findings:
                            artifacts.extend(finding.artifacts)
                        
                        self.add_finding(
                            finding_type="ransomware_infection",
                            description=f"Infection par ransomware {name} détectée avec un haut niveau de confiance",
                            severity="critical",
                            confidence=90,
                            artifacts=artifacts,
                            metadata={
                                "malware_name": name,
                                "evidence_count": len(findings),
                                "correlated_findings": [finding.id for finding in findings]
                            }
                        )
            
            # Détecter une persistance de malware
            suspicious_files = findings_by_type.get("suspicious_file", [])
            if suspicious_files:
                for file_finding in suspicious_files:
                    file_path = file_finding.metadata.get("file_path", "")
                    if file_path:
                        # Chercher des références dans le registre
                        for finding_type, findings in findings_by_type.items():
                            if finding_type == "registry" or "registry" in finding_type:
                                for reg_finding in findings:
                                    reg_data = str(reg_finding.artifacts[0] if reg_finding.artifacts else "")
                                    if file_path.lower() in reg_data.lower():
                                        self.add_finding(
                                            finding_type="malware_persistence",
                                            description=f"Mécanisme de persistance détecté: {file_path} référencé dans le registre",
                                            severity="high",
                                            confidence=75,
                                            artifacts=reg_finding.artifacts + file_finding.artifacts,
                                            metadata={
                                                "file_path": file_path,
                                                "correlated_findings": [reg_finding.id, file_finding.id]
                                            }
                                        )
                                        break
        
        except Exception as e:
            logger.error(f"Erreur lors de l'analyse des corrélations: {str(e)}")
